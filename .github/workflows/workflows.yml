name: Angular CI/CD Development Deploy

# This workflow runs on pushes to 'main' or manual trigger
on:
  push:
    branches:
      - main
  workflow_dispatch:

# --- JOB 1: BUILD (CI - Continuous Integration) ---
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1. Setup the required Node.js environment
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20' 
          
      # 2. Install Angular CLI and project dependencies
      - name: Install dependencies
        run: |
          npm install -g @angular/cli
          npm ci

      # 3. Build the Angular Application
      - name: Build Angular app for production
        # Note: 'ng build' creates the production files in a folder like 'dist/my-app-name/'
        run: ng build --configuration=production 

      # 4. Prepare the artifacts (the built files)
      - name: Tar the built application files
        run: |
          # Use 'find' to robustly locate the dynamically named Angular output folder (e.g., dist/my-project)
          # We are searching for a directory inside 'dist' named *-commerce, which matches your app name structure.
          BUILD_DIR=$(find dist -maxdepth 1 -type d -name "*-commerce" | head -n 1)
          if [ -z "$BUILD_DIR" ]; then
            # Fallback if the structured name isn't found
            BUILD_DIR="dist" 
          fi
          # Create a compressed archive of the contents of the built folder
          tar -czf release.tar.gz -C $BUILD_DIR . 

      # 5. Upload the archive as an artifact for the deployment job
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-package
          path: release.tar.gz

# --- SEPARATOR --- 

# --- JOB 2: DEPLOY (CD - Continuous Deployment) ---
  deploy:
    # This job only runs if the 'build' job succeeded
    needs: build
    runs-on: ubuntu-latest
    
    environment: development 

    steps:
      # 1. Download the built artifact from the previous job
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: release-package

      # 2. Set up SSH for secure connection and run remote commands
      - name: Deploy using SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # The commands to run on the remote Ubuntu server:
          script: |
            DEPLOY_PATH="/var/www/e-commerce"
            
            # 1. Safety check: Create the deployment path if it doesn't exist
            echo "Ensuring deployment directory exists: $DEPLOY_PATH"
            mkdir -p $DEPLOY_PATH
            
            # 2. DEBUG: List contents of the deployer's home directory (where the artifact lands)
            echo "Contents of deployer's home directory (~):"
            ls -l ~/
            
            # 3. Check for the existence of the artifact before proceeding
            if [ ! -f ~/release.tar.gz ]; then
              echo "FATAL ERROR: release.tar.gz not found in home directory!"
              exit 1
            fi
            
            # 4. Move and Overwrite (this happens inside the deployment path)
            echo "Moving and extracting artifact..."
            mv ~/release.tar.gz $DEPLOY_PATH/
            
            cd $DEPLOY_PATH
            
            # 5. Extract the files (z=gzip, x=extract, f=file). Overwrites existing files.
            tar -xzf release.tar.gz
            
            # 6. Clean up
            rm release.tar.gz
            
            # 7. (OPTIONAL: Restart your web server or application service here)
            # Example for Nginx:
            # sudo systemctl restart nginx
            
            echo "Deployment to $DEPLOY_PATH complete!"
